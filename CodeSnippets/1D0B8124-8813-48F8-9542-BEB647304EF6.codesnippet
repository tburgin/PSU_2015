<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>AuthPlugin</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassInterfaceMethods</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>#pragma mark ***** Mechanism Entry Points

/**
 * Called by the plugin host to create a mechanism, that is, a specific
 * instance of authentication.
 *
 * inPlugin is the plugin reference, that is, the value returned by
 * AuthorizationPluginCreate.
 *
 * inEngine is a reference to the engine that's running the plugin.
 * We need to keep it around because it's a parameter to all the
 * callbacks.
 *
 * mechanismId is the name of the mechanism.  When you configure your
 * mechanism in "/etc/authorization", you supply a string of the
 * form:
 *
 *   plugin:mechanism[,privileged]
 *
 * where:
 *
 * o plugin is the name of this bundle (without the extension)
 * o mechanism is the string that's passed to mechanismId
 * o privileged, if present, causes this mechanism to be
 *   instantiated in the privileged (rather than the GUI-capable)
 *   plug-in host
 *
 * You can use the mechanismId to support multiple types of
 * operation within the same plugin code.  For example, your plugin
 * might have two cooperating mechanisms, one that needs to use the
 * GUI and one that needs to run privileged.  This allows you to put
 * both mechanisms in the same plugin.
 *
 * outMechanism is a pointer to a place where you return a reference to
 * the newly created mechanism.
 *
 *  @param inPlugin AuthorizationPluginRef
 *  @param inEngine AuthorizationEngineRef
 *  @param mechanismId AuthorizationMechanismId
 *  @param outMechanism AuthorizationMechanismRef
 *
 *  @return OSStatus
 */
- (OSStatus) MechanismCreate:(AuthorizationPluginRef)inPlugin
                   EngineRef:(AuthorizationEngineRef)inEngine
                 MechanismId:(AuthorizationMechanismId)mechanismId
                MechanismRef:(AuthorizationMechanismRef *)outMechanism;
/**
 * Called by the system to start authentication using this mechanism.
 * This is where the real work is done.
 *
 *  @param inMechanism AuthorizationMechanismRef
 *
 *  @return OSStatus
 */
- (OSStatus) MechanismInvoke:(AuthorizationMechanismRef)inMechanism;

/**
 * Called by the system to deactivate the mechanism, in the traditional
 * GUI sense of deactivating a window.  After your plugin has deactivated
 * it's UI, it should call the DidDeactivate callback.
 * In our case, we have no UI, so we just call DidDeactivate immediately.
 *
 *  @param inMechanism AuthorizationMechanismRef
 *
 *  @return OSStatus
 */
- (OSStatus) MechanismDeactivate:(AuthorizationMechanismRef)inMechanism;

/**
 *  Called by the system when it's done with the mechanism.
 *
 *  @param inMechanism AuthorizationMechanismRef
 *
 *  @return OSStatus
 */
- (OSStatus) MechanismDestroy:(AuthorizationMechanismRef)inMechanism;

#pragma mark ***** Plugin Entry Points

/**
 * Called by the system when it's done with the plugin.
 * All of the mechanisms should have been destroyed by this time.
 *
 *  @param inPlugin AuthorizationMechanismRef
 *
 *  @return OSStatus
 */
- (OSStatus) PluginDestroy:(AuthorizationPluginRef)inPlugin;

/**
 * The primary entry point of the plugin.  Called by the system
 * to instantiate the plugin.
 *
 * callbacks is a pointer to a bunch of callbacks that allow
 * your plugin to ask the system to do operations on your behalf.
 *
 * outPlugin is a pointer to a place where you can return a
 * reference to the newly created plugin.
 *
 * outPluginInterface is a pointer to a place where you can return
 * a pointer to your plugin dispatch table.
 *
 *  @param callbacks          AuthorizationCallbacks
 *  @param outPlugin          AuthorizationPluginRef
 *  @param outPluginInterface AuthorizationPluginInterface
 *
 *  @return OSStatus
 */
- (OSStatus) AuthorizationPluginCreate:(const AuthorizationCallbacks *)callbacks
                             PluginRef:(AuthorizationPluginRef *)outPlugin
                       PluginInterface:(const AuthorizationPluginInterface **)outPluginInterface;

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>1D0B8124-8813-48F8-9542-BEB647304EF6</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C-Plus-Plus</string>
	<key>IDECodeSnippetSummary</key>
	<string>Mechanism Entry Points</string>
	<key>IDECodeSnippetTitle</key>
	<string>AuthPluginMechanismEntryPoints</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
